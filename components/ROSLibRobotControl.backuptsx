// components/ROSLibRobotControl.tsx - 타입 안전 버전
import React, { useState, useEffect, useRef } from 'react';
import { RouteData } from '@/interfaces/route';
import { deduplicateRouteByLocation } from '@/lib/utils';

interface ROSLibRobotControlProps {
  routeData?: RouteData;
  nucIP?: string;
  isROSLIBLoaded?: boolean;
  onRobotPositionUpdate?: (position: RobotPosition) => void;
}

interface RobotPosition {
  x: number;
  y: number;
  angle: number;
  timestamp: number;
  type: 'ros' | 'pixel';
  raw?: {
    original: ROSLIB.geometry_msgs.Point;
    transformed: { x: number; y: number };
  };
}

interface TransformParameters {
  translation: { x: number; y: number };
  rotation: number;
  scale: { x: number; y: number };
  enabled: boolean;
}

// 🔧 ROSLIB 타입 체크 헬퍼
const isROSLIBAvailable = (): boolean => {
  return typeof window !== 'undefined' && window.ROSLIB !== undefined;
};

const getROSLIB = (): typeof ROSLIB | null => {
  if (typeof window !== 'undefined' && window.ROSLIB) {
    return window.ROSLIB;
  }
  return null;
};

const ROSLibRobotControl: React.FC<ROSLibRobotControlProps> = ({
  routeData,
  nucIP = '172.19.30.218',
  isROSLIBLoaded = false,
  onRobotPositionUpdate,
}) => {
  const [isROSLIBReady, setIsROSLIBReady] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [robotPosition, setRobotPosition] = useState<RobotPosition | null>(
    null,
  );
  const [notifications, setNotifications] = useState<string[]>([]);
  const [connectionAttempts, setConnectionAttempts] = useState(0);

  // 매대별 이동 상태
  const [currentStoreIndex, setCurrentStoreIndex] = useState(0);
  const [isNavigating, setIsNavigating] = useState(false);

  // 🔧 타입 안전한 refs
  const rosRef = useRef<ROSLIB.Ros | null>(null);
  const goalPublisherRef = useRef<ROSLIB.Topic | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // 좌표 변환 파라미터
  const [transformParams, setTransformParams] = useState<TransformParameters>({
    translation: { x: 0, y: 0 },
    rotation: 0,
    scale: { x: 1, y: 1 },
    enabled: false,
  });

  // 좌표 변환 함수들
  const applyTransform = (
    webX: number,
    webY: number,
  ): { x: number; y: number } => {
    if (!transformParams.enabled) {
      return { x: webX, y: webY };
    }

    const { translation, rotation, scale } = transformParams;
    const cosR = Math.cos(rotation);
    const sinR = Math.sin(rotation);

    const rotatedX = webX * cosR - webY * sinR;
    const rotatedY = webX * sinR + webY * cosR;

    const transformedX = rotatedX * scale.x + translation.x;
    const transformedY = rotatedY * scale.y + translation.y;

    return { x: transformedX, y: transformedY };
  };

  const reverseTransform = (
    rosX: number,
    rosY: number,
  ): { x: number; y: number } => {
    if (!transformParams.enabled) {
      return { x: rosX, y: rosY };
    }

    const { translation, rotation, scale } = transformParams;
    const scaledX = (rosX - translation.x) / scale.x;
    const scaledY = (rosY - translation.y) / scale.y;

    const cosR = Math.cos(-rotation);
    const sinR = Math.sin(-rotation);

    const webX = scaledX * cosR - scaledY * sinR;
    const webY = scaledX * sinR + scaledY * cosR;

    return { x: webX, y: webY };
  };

  const setCoordinateTransform = (
    params: Partial<TransformParameters>,
  ): void => {
    setTransformParams((prev) => ({ ...prev, ...params }));
    addNotification(
      `좌표 변환 업데이트: ${params.enabled ? '활성화' : '비활성화'}`,
    );
  };

  // ROSLIB 로드 상태 감지
  useEffect(() => {
    let checkInterval: NodeJS.Timeout;

    const checkROSLIB = (): boolean => {
      if (isROSLIBAvailable()) {
        console.log('✅ ROSLIB 객체 확인됨');
        setIsROSLIBReady(true);
        addNotification('ROSLIB.js 준비 완료');
        return true;
      }
      return false;
    };

    if (checkROSLIB()) return;

    if (isROSLIBLoaded) {
      checkInterval = setInterval(() => {
        if (checkROSLIB()) {
          clearInterval(checkInterval);
        }
      }, 50);
    }

    return () => {
      if (checkInterval) clearInterval(checkInterval);
    };
  }, [isROSLIBLoaded]);

  // ROSLIB가 준비되면 자동으로 연결 시도
  useEffect(() => {
    if (
      isROSLIBReady &&
      !isConnected &&
      !isConnecting &&
      connectionAttempts < 3
    ) {
      console.log('🔄 자동 ROS 연결 시도...');
      initializeROSConnection();
    }
  }, [isROSLIBReady, nucIP]);

  const addNotification = (message: string): void => {
    console.log('📢', message);
    setNotifications((prev) => {
      const newNotifications = [
        ...prev,
        `${new Date().toLocaleTimeString()}: ${message}`,
      ];
      return newNotifications.slice(-5);
    });

    setTimeout(() => {
      setNotifications((prev) => prev.slice(1));
    }, 5000);
  };

  const initializeROSConnection = async (): Promise<void> => {
    const ROSLIB = getROSLIB();
    if (!isROSLIBReady || !ROSLIB) {
      addNotification('ROSLIB가 준비되지 않았습니다');
      return;
    }

    if (isConnecting) return;

    setIsConnecting(true);
    setConnectionAttempts((prev) => prev + 1);

    try {
      if (rosRef.current) {
        try {
          rosRef.current.close();
        } catch (error) {
          console.warn('기존 연결 정리 중 오류:', error);
        }
      }

      const rosUrl = `ws://${nucIP}:9090`;
      addNotification(`ROS 연결 시도: ${rosUrl}`);

      rosRef.current = new ROSLIB.Ros({ url: rosUrl });

      rosRef.current.on('connection', () => {
        console.log('✅ ROS2 연결 성공');
        setIsConnected(true);
        setIsConnecting(false);
        setConnectionAttempts(0);
        addNotification('ROS2 연결 성공!');
        setupROSTopics();
      });

      rosRef.current.on('error', (error: Error) => {
        console.error('❌ ROS2 연결 오류:', error);
        setIsConnected(false);
        setIsConnecting(false);
        addNotification(`ROS2 연결 오류: ${error?.message || 'Unknown error'}`);

        if (connectionAttempts < 3) {
          scheduleReconnect();
        }
      });

      rosRef.current.on('close', () => {
        console.log('🔌 ROS2 연결 끊김');
        setIsConnected(false);
        setIsConnecting(false);
        addNotification('ROS2 연결 끊김');

        if (connectionAttempts < 3) {
          scheduleReconnect();
        }
      });
    } catch (error) {
      console.error('ROS 초기화 오류:', error);
      setIsConnecting(false);
      const errorMessage =
        error instanceof Error ? error.message : 'Unknown error';
      addNotification(`ROS 초기화 실패: ${errorMessage}`);
    }
  };

  const scheduleReconnect = (): void => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
    }

    const delay = Math.min(3000 * connectionAttempts, 10000);
    addNotification(
      `${delay / 1000}초 후 재연결 시도... (${connectionAttempts}/3)`,
    );

    reconnectTimeoutRef.current = setTimeout(() => {
      if (!isConnected && connectionAttempts < 3) {
        initializeROSConnection();
      }
    }, delay);
  };

  const setupROSTopics = (): void => {
    const ROSLIB = getROSLIB();
    if (!rosRef.current || !ROSLIB) return;

    try {
      // 픽셀 좌표 토픽 구독 (로봇 위치 수신)
      const pixelTopicSub = new ROSLIB.Topic({
        ros: rosRef.current,
        name: '/robot_pixel_position',
        messageType: 'geometry_msgs/Point',
      });

      pixelTopicSub.subscribe((message: ROSLIB.geometry_msgs.Point) => {
        console.log('📍 픽셀 좌표 수신:', message);

        const webCoords = reverseTransform(message.x, message.y);

        const newPosition: RobotPosition = {
          x: webCoords.x,
          y: webCoords.y,
          angle: 0,
          timestamp: Date.now(),
          type: 'pixel',
          raw: { original: message, transformed: webCoords },
        };

        setRobotPosition(newPosition);
        if (onRobotPositionUpdate) onRobotPositionUpdate(newPosition);

        if (transformParams.enabled) {
          addNotification(
            `위치 수신: ROS(${message.x}, ${
              message.y
            }) → 웹(${webCoords.x.toFixed(1)}, ${webCoords.y.toFixed(1)})`,
          );
        } else {
          addNotification(`픽셀 위치 수신: (${message.x}, ${message.y})`);
        }
      });

      // 목표 좌표 퍼블리셔 설정 (토픽 방식)
      goalPublisherRef.current = new ROSLIB.Topic({
        ros: rosRef.current,
        name: '/goal_position',
        messageType: 'geometry_msgs/Point',
      });

      addNotification('토픽 설정 완료: 위치 수신 + 목표 전송');
    } catch (error) {
      console.error('토픽 설정 오류:', error);
      const errorMessage =
        error instanceof Error ? error.message : 'Unknown error';
      addNotification(`토픽 설정 실패: ${errorMessage}`);
    }
  };

  // 단일 매대 좌표 전송 함수 (토픽 방식)
  const sendSingleGoal = (
    x: number,
    y: number,
    description?: string,
  ): boolean => {
    const ROSLIB = getROSLIB();
    if (!rosRef.current || !goalPublisherRef.current || !ROSLIB) {
      addNotification('ROS 연결이 필요합니다');
      return false;
    }

    try {
      // 좌표 변환 적용
      const transformedCoords = applyTransform(x, y);

      const goalMessage = new ROSLIB.Message({
        x: transformedCoords.x,
        y: transformedCoords.y,
        z: 0.0,
      });

      goalPublisherRef.current.publish(goalMessage);

      addNotification(
        `🎯 목표 전송: ${
          description || `(${x}, ${y})`
        } → ROS(${transformedCoords.x.toFixed(
          1,
        )}, ${transformedCoords.y.toFixed(1)})`,
      );

      console.log('🎯 목표 좌표 전송:', {
        description,
        original: { x, y },
        transformed: transformedCoords,
      });

      return true;
    } catch (error) {
      console.error('목표 전송 오류:', error);
      const errorMessage =
        error instanceof Error ? error.message : 'Unknown error';
      addNotification(`목표 전송 실패: ${errorMessage}`);
      return false;
    }
  };

  // 다음 매대로 이동
  const goToNextStore = (): void => {
    if (!routeData || !routeData.route || routeData.route.length === 0) {
      addNotification('이동할 매대가 없습니다');
      return;
    }

    const uniqueRoute = deduplicateRouteByLocation(routeData.route);

    if (currentStoreIndex >= uniqueRoute.length) {
      addNotification('모든 매대를 완료했습니다!');
      return;
    }

    const targetStore = uniqueRoute[currentStoreIndex];
    const success = sendSingleGoal(
      targetStore.coordinates.x,
      targetStore.coordinates.y,
      targetStore.location,
    );

    if (success) {
      setIsNavigating(true);
      addNotification(
        `📍 ${currentStoreIndex + 1}/${uniqueRoute.length}: ${
          targetStore.location
        }으로 이동 시작`,
      );
    }
  };

  // 현재 매대 완료 및 다음으로
  const completeCurrentStore = (): void => {
    if (!routeData || !routeData.route) return;

    const uniqueRoute = deduplicateRouteByLocation(routeData.route);

    if (currentStoreIndex < uniqueRoute.length) {
      addNotification(`✅ ${uniqueRoute[currentStoreIndex].location} 완료`);
      setCurrentStoreIndex((prev) => prev + 1);
      setIsNavigating(false);
    }
  };

  const stopRobot = (): void => {
    const ROSLIB = getROSLIB();
    if (!rosRef.current || !ROSLIB) {
      addNotification('ROS 연결이 필요합니다');
      return;
    }

    try {
      const cmdVel = new ROSLIB.Topic({
        ros: rosRef.current,
        name: '/cmd_vel',
        messageType: 'geometry_msgs/Twist',
      });

      const stopTwist = new ROSLIB.Message({
        linear: { x: 0.0, y: 0.0, z: 0.0 },
        angular: { x: 0.0, y: 0.0, z: 0.0 },
      });

      cmdVel.publish(stopTwist);
      addNotification('정지 명령 전송');
      setIsNavigating(false);
    } catch (error) {
      console.error('정지 명령 오류:', error);
      const errorMessage =
        error instanceof Error ? error.message : 'Unknown error';
      addNotification(`정지 명령 실패: ${errorMessage}`);
    }
  };

  const forceReconnect = (): void => {
    setConnectionAttempts(0);
    setIsConnecting(false);
    setIsConnected(false);

    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
    }

    initializeROSConnection();
  };

  // 현재 경로 정보
  const uniqueRoute = routeData?.route
    ? deduplicateRouteByLocation(routeData.route)
    : [];

  return (
    <div className="bg-white rounded-lg border border-gray-200 overflow-hidden h-full">
      {/* 헤더 */}
      <div className="bg-gradient-to-r from-green-600 to-blue-600 text-white p-4">
        <div className="flex justify-between items-center">
          <h3 className="font-bold text-lg">🤖 Scout Mini 제어</h3>
          <div className="flex items-center gap-4 text-sm">
            <div className="flex items-center gap-1">
              <div
                className={`w-3 h-3 rounded-full ${
                  isROSLIBReady ? 'bg-green-400' : 'bg-yellow-400'
                }`}
              />
              <span>ROSLIB: {isROSLIBReady ? '준비됨' : '로딩중'}</span>
            </div>
            <div className="flex items-center gap-1">
              <div
                className={`w-3 h-3 rounded-full ${
                  isConnected
                    ? 'bg-green-400'
                    : isConnecting
                    ? 'bg-yellow-400'
                    : 'bg-red-400'
                }`}
              />
              <span>
                ROS2:{' '}
                {isConnected ? '연결됨' : isConnecting ? '연결중' : '끊김'}
              </span>
            </div>
            <div className="flex items-center gap-1">
              <div
                className={`w-3 h-3 rounded-full ${
                  transformParams.enabled ? 'bg-blue-400' : 'bg-gray-400'
                }`}
              />
              <span>변환: {transformParams.enabled ? 'ON' : 'OFF'}</span>
            </div>
            {robotPosition && (
              <div className="flex items-center gap-1">
                <div className="w-3 h-3 bg-blue-400 rounded-full animate-pulse" />
                <span>위치: {robotPosition.type.toUpperCase()}</span>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* 알림 영역 */}
      {notifications.length > 0 && (
        <div
          className="bg-blue-50 border-b p-3 overflow-y-auto"
          style={{ maxHeight: '120px' }}
        >
          {notifications.map((notification, index) => (
            <div key={index} className="text-xs text-blue-800 mb-1 font-mono">
              📢 {notification}
            </div>
          ))}
        </div>
      )}

      <div className="p-4 space-y-4">
        {/* 연결 상태 표시 생략 - 기존과 동일 */}

        {/* 매대별 이동 제어 */}
        {uniqueRoute.length > 0 && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 className="font-semibold text-blue-800 mb-3">
              🗺️ 매대별 이동 ({currentStoreIndex + 1}/{uniqueRoute.length})
            </h4>

            {/* 현재 목표 매대 정보 */}
            {currentStoreIndex < uniqueRoute.length && (
              <div className="bg-white rounded p-3 mb-3 border">
                <div className="font-medium text-gray-800 mb-1">
                  📍 현재 목표: {uniqueRoute[currentStoreIndex].location}
                </div>
                <div className="text-sm text-gray-600">
                  좌표: ({uniqueRoute[currentStoreIndex].coordinates.x},{' '}
                  {uniqueRoute[currentStoreIndex].coordinates.y})
                </div>
                <div className="text-sm text-gray-600">
                  물품: {uniqueRoute[currentStoreIndex].item}
                </div>
              </div>
            )}

            {/* 제어 버튼들 */}
            <div className="grid grid-cols-2 gap-3">
              <button
                onClick={goToNextStore}
                disabled={
                  !isConnected || currentStoreIndex >= uniqueRoute.length
                }
                className={`py-3 px-4 rounded-lg font-semibold text-white transition-colors ${
                  !isConnected || currentStoreIndex >= uniqueRoute.length
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-green-500 hover:bg-green-600'
                }`}
              >
                {currentStoreIndex >= uniqueRoute.length
                  ? '✅ 완료'
                  : '🚀 매대로 이동'}
              </button>

              <button
                onClick={completeCurrentStore}
                disabled={currentStoreIndex >= uniqueRoute.length}
                className={`py-3 px-4 rounded-lg font-semibold text-white transition-colors ${
                  currentStoreIndex >= uniqueRoute.length
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-blue-500 hover:bg-blue-600'
                }`}
              >
                ✅ 매대 완료
              </button>

              <button
                onClick={stopRobot}
                disabled={!isConnected}
                className={`py-3 px-4 rounded-lg font-semibold text-white transition-colors ${
                  !isConnected
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-red-500 hover:bg-red-600'
                }`}
              >
                ⏹️ 정지
              </button>

              <button
                onClick={() => {
                  setCurrentStoreIndex(0);
                  setIsNavigating(false);
                  addNotification('경로 초기화됨');
                }}
                disabled={!isConnected}
                className={`py-3 px-4 rounded-lg font-semibold text-white transition-colors ${
                  !isConnected
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-gray-500 hover:bg-gray-600'
                }`}
              >
                🔄 초기화
              </button>
            </div>
          </div>
        )}

        {/* 테스트 버튼 */}
        <div className="grid grid-cols-2 gap-4">
          <button
            onClick={() => sendSingleGoal(100, 100, '테스트 이동')}
            disabled={!isConnected}
            className={`py-3 px-4 rounded-lg font-semibold text-white transition-colors ${
              !isConnected
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-green-500 hover:bg-green-600'
            }`}
          >
            🚀 테스트 이동 (100, 100)
          </button>

          <button
            onClick={stopRobot}
            disabled={!isConnected}
            className={`py-3 px-4 rounded-lg font-semibold text-white transition-colors ${
              !isConnected
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-red-500 hover:bg-red-600'
            }`}
          >
            ⏹️ 정지
          </button>
        </div>

        {/* 로봇 위치 정보 */}
        {robotPosition && (
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
            <h4 className="font-semibold mb-2 flex items-center">
              📍 로봇 위치
              <span
                className={`ml-2 px-2 py-1 rounded text-xs ${
                  robotPosition.type === 'pixel'
                    ? 'bg-blue-100 text-blue-800'
                    : 'bg-green-100 text-green-800'
                }`}
              >
                {robotPosition.type.toUpperCase()}
              </span>
            </h4>
            <div className="text-sm space-y-1">
              <div className="font-mono">
                <strong>표시 X:</strong> {robotPosition.x.toFixed(1)}
              </div>
              <div className="font-mono">
                <strong>표시 Y:</strong> {robotPosition.y.toFixed(1)}
              </div>
              <div className="text-gray-500 text-xs">
                업데이트:{' '}
                {new Date(robotPosition.timestamp).toLocaleTimeString()}
              </div>

              {/* 원본 vs 변환된 좌표 비교 */}
              {transformParams.enabled && robotPosition.raw?.original && (
                <div className="mt-2 pt-2 border-t border-gray-300">
                  <div className="text-xs text-gray-600">
                    <div>
                      원본 ROS: ({robotPosition.raw.original.x},{' '}
                      {robotPosition.raw.original.y})
                    </div>
                    <div>
                      변환 후: ({robotPosition.x.toFixed(1)},{' '}
                      {robotPosition.y.toFixed(1)})
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* 디버그 정보 */}
        <div className="bg-gray-100 border border-gray-300 rounded-lg p-3">
          <h4 className="font-semibold text-sm mb-2">🔧 연결 상태</h4>
          <div className="text-xs space-y-1">
            <div>ROSLIB Ready: {isROSLIBReady ? '✅' : '❌'}</div>
            <div>ROS Connected: {isConnected ? '✅' : '❌'}</div>
            <div>Goal Publisher: {goalPublisherRef.current ? '✅' : '❌'}</div>
            <div>Robot Position: {robotPosition ? '✅' : '❌'}</div>
            <div>Position Type: {robotPosition?.type || 'N/A'}</div>
            <div>
              Transform Enabled: {transformParams.enabled ? '✅' : '❌'}
            </div>
            <div>
              Current Store: {currentStoreIndex + 1}/{uniqueRoute.length}
            </div>
            <div>Navigating: {isNavigating ? '✅' : '❌'}</div>
            <div>NUC IP: {nucIP}:9090</div>
          </div>
        </div>

        {/* 개발자 도구 (좌표 변환 테스트) */}
        {process.env.NODE_ENV === 'development' && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-semibold text-yellow-800 mb-2">
              🔧 개발자 도구
            </h4>
            <div className="space-y-2">
              <button
                onClick={() => {
                  setCoordinateTransform({
                    translation: { x: 50, y: 30 },
                    rotation: 0.1,
                    scale: { x: 1.1, y: 1.1 },
                    enabled: true,
                  });
                }}
                className="px-3 py-1 bg-yellow-200 text-yellow-800 rounded text-sm hover:bg-yellow-300"
              >
                테스트 변환식 적용
              </button>

              <button
                onClick={() => {
                  setCoordinateTransform({ enabled: false });
                }}
                className="ml-2 px-3 py-1 bg-red-200 text-red-800 rounded text-sm hover:bg-red-300"
              >
                변환 초기화
              </button>
            </div>

            <div className="mt-2 text-xs text-yellow-700">
              * 실제 운영 시에는 정합점 기반 변환 파라미터를 적용하세요
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ROSLibRobotControl;
